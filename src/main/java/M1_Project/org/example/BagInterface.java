package M1_Project.org.example;public interface BagInterface<T> {	/** Gets the current number of entries in this bag.	 * @return  The integer number of entries currently in the bag. */	default int getCurrentSize() {		return toArray().length;	}	/** Sees whether this bag is empty.	 * @return  True if the bag is empty, or false if not. */	default boolean isEmpty() {		return getCurrentSize() == 0;	}	/** Adds a new entry to this bag.	 * @param newEntry  The object to be added as a new entry.	 * @return  True if the addition is successful, or false if not. */	default boolean add(T newEntry) {		try {			T[] tempArray = toArray();			T[] newArray = java.util.Arrays.copyOf(tempArray, tempArray.length + 1);			newArray[newArray.length - 1] = newEntry;			return true;		} catch (Exception e) {			return false;		}	}	/** Removes one unspecified entry from this bag, if possible.	 * @return  Either the removed entry, if the removal was successful, or null. */	default T remove() {		if (isEmpty()) {			return null;		}		T result = toArray()[0]; // Get the first element for removal		remove(result); // Remove the element from the bag		return result;	}	/** Removes one occurrence of a given entry from this bag.	 * @param anEntry  The entry to be removed.	 * @return  True if the removal was successful, or false if not. */	default boolean remove(T anEntry) {		T[] bagArray = toArray();		for (int i = 0; i < bagArray.length; i++) {			if (bagArray[i].equals(anEntry)) {				bagArray[i] = bagArray[bagArray.length - 1]; // Replace with the last element				bagArray = java.util.Arrays.copyOf(bagArray, bagArray.length - 1); // Shrink the array				return true;			}		}		return false;	}	/** Removes all entries from this bag. */	default void clear() {		T[] tempArray = toArray();		tempArray = java.util.Arrays.copyOf(tempArray, 0);	}	/** Counts the number of times a given entry appears in this bag.	 * @param anEntry  The entry to be counted.	 * @return  The number of times anEntry appears in the bag. */	default int getFrequencyOf(T anEntry) {		int count = 0;		T[] bagArray = toArray();		for (T entry : bagArray) {			if (entry.equals(anEntry)) {				count++;			}		}		return count;	}	/** Tests whether this bag contains a given entry.	 * @param anEntry  The entry to locate.	 * @return  True if the bag contains anEntry, or false if not. */	default boolean contains(T anEntry) {		T[] bagArray = toArray();		for (T entry : bagArray) {			if (entry.equals(anEntry)) {				return true;			}		}		return false;	}	/** Retrieves all entries that are in this bag.	 * @return  A newly allocated array of all the entries in the bag.	 *          Note: If the bag is empty, the returned array is empty. */	default T[] toArray() {		// Placeholder implementation using Object array since Java does not allow direct generic array creation.		T[] bagArray = (T[]) new Object[getCurrentSize()];		// In actual implementation, this would retrieve all entries from the linked nodes.		return bagArray;	}	// Future features without implementation	public BagInterface<T> union(BagInterface<T> anotherBag);	public BagInterface<T> intersection(BagInterface<T> anotherBag);	public BagInterface<T> difference(BagInterface<T> anotherBag);}// Program comments - Author: Ahmet Sekerci